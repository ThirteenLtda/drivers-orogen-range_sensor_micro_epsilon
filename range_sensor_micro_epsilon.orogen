name "range_sensor_micro_epsilon"
# Optionally declare the version number
version "0.1"

using_task_library 'iodrivers_base'

import_types_from "std"
import_types_from "base"


using_library "range_sensor_micro_epsilon"
import_types_from "range_sensor_micro_epsilon/PacketTypes.hpp"
import_types_from "range_sensor_micro_epsilonTypes.hpp"


task_context "Task" do
    subclasses "iodrivers_base::Task"

    # A configuration property (here, a std::string). Its value can be retrieved
    # in the C++ code with # _config_value.get() and _config_value.set(new_value).
    # property "config_value", "/std/string"

    # An input port, i.e. an object from which the component gets data from
    # other components' outputs
    #
    # Data can be retrieved using _input.read(value), which returns true if data
    # was available, and false otherwise. _input.connected() returns if this
    # input is connected to an output or not.
    # input_port "input", "/std/string"

    # An output port, i.e. an object to which the component pushes data so that
    # it is transmitted to other components' inputs
    #
    # Data can be written using _output.write(value). _output.connected() returns
    # if this output is connected to an input or not.
    output_port "laser_samples", "range_sensor_micro_epsilon/RangeMeasurements"

    output_port "error_statistics", "range_sensor_micro_epsilon/ErrorStats"

    # If you want that component's updateHook() to be executed when the "input"
    # port gets data, uncomment this and comment the 'periodic' line
    # port_driven "input"
    # By default, the task will be periodic with a period of 0.1
    periodic 0.1
end
